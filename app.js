const responses = ["c", "a", "b", "a", "c"];
const emojis = ["‚úîÔ∏è", "‚ú®", "üëÄ", "üò≠", "üëé"];
console.log(responses[0]); // c ( rappel, l'index commence √† 0 !) 

const form = document.querySelector(".quiz-form"); // cible l'√©l√©ment html de classe quiz-form
form.addEventListener("submit", handleSubmit); // ajoute un eventlistener pour r√©agir au "submit" et appeller la fct handleSubmit
                                                // Rappel: l'√©v√®nement submit est d√©clench√© au clic sur un bouton type="submit"

function handleSubmit(e) {
  e.preventDefault();  // √©vite le comportement de rechargement par d√©faut du navigateur - lorsque form "submit". 

  const results = [];

  // cible la valeur des cases (radio buttons) s√©lectionn√©es
  const radioButtons = document.querySelectorAll("input[type='radio']:checked");

  radioButtons.forEach((radioButton, index) => {  // boucle sur chaque √©l√©ment dans radioButtons                        responses[0]   responses[1] ... 
    if (radioButton.value === responses[index]) {   // compare la valeur de la case s√©lectionn√©e/r√©ponse (a, b, c, d) et les r√©ponses (  [   "c"     ,      "a"       , "b", "a", "c"]; )
      results.push(true);
    } else {
      results.push(false);
    }
  });
  
  // A ce stade, results ressemble donc √† un tableau comme ceci : 
  // [true, true, true, true, false]

  showResults(results);
  addColors(results)
}

